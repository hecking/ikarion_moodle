// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var _base,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (window.ut == null) {
    window.ut = {};
  }

  if ((_base = window.ut).commons == null) {
    _base.commons = {};
  }

  window.ut.commons.actionlogging = window.ut.commons.actionlogging || {};

  window.ut.commons.actionlogging.ActionLogger = (function() {
    function ActionLogger(metadataHandler) {
      this.log = __bind(this.log, this);
      var error, storageHandler;
      this._debug = false;
      console.log("Initializing ActionLogger.");
      console.log("...setting default logging target: nullLogging.");
      try {
        metadataHandler.getMetadata();
        this.metadataHandler = metadataHandler;
      } catch (_error) {
        error = _error;
        throw "ActionLogger needs a MetadataHandler at construction!";
      }
      this.loggingTarget = this.nullLogging;
      this.loggingUrl = null;
      this.loggedApplicationStarted = false;
    }

    ActionLogger.prototype.setLoggingTarget = function(newLoggingTarget) {
      if (typeof newLoggingTarget === "string") {
        if (this._debug) {
          console.log("setLoggingTarget(" + newLoggingTarget + ")");
        }
        return this.loggingTarget = (function() {
          switch (newLoggingTarget.toLowerCase()) {
            case "null":
              return this.nullLogging;
            case "console":
              return this.consoleLogging;
            case "consoleshort":
              return this.consoleLoggingShort;
            case "consoleobject":
              return this.consoleLoggingObject;
            case "dufftown":
              return this.dufftownLogging;
            case "opensocial":
              return this.opensocialLogging;
            case "togetherjs":
              return this.togetherLogging;
            default:
              this.loggingUrl = newLoggingTarget;
              return this.httpPostLogging;
          }
        }).call(this);
      } else {
        return this.loggingTarget = newLoggingTarget;
      }
    };

    ActionLogger.prototype.setLoggingTargetByName = function(newLoggingTargetName) {
      console.log("ActionLogger: setting logging target (by name) to " + newLoggingTargetName);
      if (newLoggingTargetName === "null") {
        return this.loggingTarget = this.nullLogging;
      } else if (newLoggingTargetName === "console") {
        return this.loggingTarget = this.consoleLogging;
      } else if (newLoggingTargetName === "consoleShort") {
        return this.loggingTarget = this.consoleLoggingShort;
      } else if (newLoggingTargetName === "dufftown") {
        return this.loggingTarget = this.dufftownLogging;
      } else if (newLoggingTargetName === "opensocial") {
        return this.loggingTarget = this.opensocialLogging;
      } else if(newLoggingTargetName === "togetherjs")  {
          return this.loggingTarget = this.togetherLogging;
      } else {
        console.log("ActionLogger: unknown logging target, setting to 'null'.");
        return this.loggingTarget = this.nullLogging;
      }
    };

    ActionLogger.prototype.log = function(verb, object) {
      var activityStreamObject, error, verbAccepted, verbKey, verbValue, _ref;
      verbAccepted = false;
      _ref = this.verbs;
      for (verbKey in _ref) {
        verbValue = _ref[verbKey];
        if (verb === verbValue) {
          verbAccepted = true;
        }
      }
      if (!verbAccepted) {
        console.warn("ActionLogger: unknown verb: " + verb);
      }
      activityStreamObject = {};
      try {
        activityStreamObject.published = new Date().toISOString();
        activityStreamObject.actor = this.metadataHandler.getActor();
        activityStreamObject.verb = verb;
        activityStreamObject.object = object;
        activityStreamObject.target = this.metadataHandler.getTarget();
        activityStreamObject.generator = this.metadataHandler.getGenerator();
        activityStreamObject.provider = this.metadataHandler.getProvider();
        this.loggingTarget(activityStreamObject);
      } catch (_error) {
        error = _error;
        console.warn("something went wrong during logging:");
        console.warn(error);
      }
      return activityStreamObject;
    };

    ActionLogger.prototype.setStorageHandler = function(storageHandler) {
      this.storageHandler = storageHandler;
    };

    ActionLogger.prototype.nullLogging = function(action) {};

    ActionLogger.prototype.consoleLogging = function(activityStreamObject) {
      return console.log(JSON.stringify(activityStreamObject, void 0, 2));
    };

    ActionLogger.prototype.consoleLoggingShort = function(activityStreamObject) {
      return console.log("ActionLogger: " + activityStreamObject.verb + " " + activityStreamObject.object.objectType + ", id: " + activityStreamObject.object.id);
    };

    ActionLogger.prototype.consoleLoggingObject = function(activityStreamObject) {
      return console.log("ActionLogger: " + activityStreamObject.verb + " " + activityStreamObject.object.objectType + ", id: " + activityStreamObject.object.id + ", object: " + (JSON.stringify(activityStreamObject.object, void 0, 2)));
    };

    ActionLogger.prototype.opensocialLogging = function(activityStreamObject) {
      var logObject;
      if (osapi !== void 0) {
        logObject = {
          "userId": "@viewer",
          "groupId": "@self",
          activity: activityStreamObject
        };
        console.log("ActionLogger: logging to Graasp: " + activityStreamObject.verb + " " + activityStreamObject.object.objectType + ", id: " + activityStreamObject.object.id);
        return osapi.activitystreams.create(logObject).execute(function(response) {
          if (response.id !== void 0) {
            return console.log("ActionLogger: sucessfully logged via osapi, response.id: " + response.id);
          } else {
            console.log("ActionLogger: something went wrong when logging via osapi:");
            return console.log(response);
          }
        });
      } else {
        return console.log("ActionLogger: can't log, osapi is undefined.");
      }
    };

    ActionLogger.prototype.dufftownLogging = function(activityStreamObject) {
      var url;
      url = "http://go-lab.collide.info/activity";
      console.log("ActionLogger: logging to " + url + ": " + activityStreamObject.verb + " " + activityStreamObject.object.objectType + ", id: " + activityStreamObject.object.id);
      return $.ajax({
        type: "POST",
        url: url,
        data: JSON.stringify(activityStreamObject),
        contentType: "application/json",
        success: function(responseData, textStatus, jqXHR) {
          return console.log("POST actionlog success, response: " + responseData);
        },
        error: function(responseData, textStatus, errorThrown) {
          console.log("POST actionlog failed, response:");
          return console.log(responseData);
        }
      });
    };

    ActionLogger.prototype.httpPostLogging = function(activityStreamObject) {
      var _this = this;
      if (this._debug) {
        console.log("ActionLogger: logging to " + this.loggingUrl + ": " + activityStreamObject.verb + " " + activityStreamObject.object.objectType + ", id: " + activityStreamObject.object.id);
      }
      return $.ajax({
        type: "POST",
        url: this.loggingUrl,
        data: JSON.stringify(activityStreamObject),
        contentType: "application/json",
        success: function(responseData, textStatus, jqXHR) {
          if (_this._debug) {
            return console.log("POST actionlog success, response: " + responseData);
          }
        },
        error: function(responseData, textStatus, errorThrown) {
          console.log("POST actionlog failed: " + responseData.status + " (" + responseData.statusText + "), response:");
          return console.log(responseData);
        }
      });
    };

    /*
      Saving important actions into protocol
      Synchronizing all actions using TogetherJS
    */
    ActionLogger.prototype.togetherLogging = function(activityStreamObject) {
        var _this = this; 
        if(TogetherJS.running){

            if(activityStreamObject.verb === "updateConcept"){
                var concept = activityStreamObject.object;
                console.log("Updating Posion of concept: " + concept.id);
                TogetherJS.send({
                   type: 'updateConcept',
                   conceptid: concept.id,
                   concepttext: concept.content,
                   xpos: concept.x,
                   ypos: concept.y
                });
            }

            if(activityStreamObject.verb === "addConcept"){
                var concept = activityStreamObject.object;
                console.log("Sending new Concept with ID: " + concept.id);
                TogetherJS.send({
                    type: 'addConcept',
                    id: concept.id,
                    text: concept.content,
                    colorName: concept.colorName,
                    className: concept.className,
                    x: concept.x,
                    y: concept.y
                });
                console.log("Adding action to protocol.");
                this.storageHandler.logAction(activityStreamObject);
            }

            if(activityStreamObject.verb === "updateText"){
                var element = activityStreamObject.object;
                console.log("Sending updated text of concept with ID: " + element.id);
                TogetherJS.send({
                    type: 'updateText',
                    id: element.id,
                    content: element.content,
                    element: element.element
                });
                console.log("Adding action to protocol.");
                this.storageHandler.logAction(activityStreamObject);
            }

            if(activityStreamObject.verb === "addRelation"){
                var element = activityStreamObject.object;
                console.log("Adding relation from: " + element.sourceId + "to: " + element.taretId);
                TogetherJS.send({
                    type: 'addRelation',
                    sourceId: element.sourceId,
                    targetId: element.targetId
                });
                console.log("Adding action to protocol.");
                this.storageHandler.logAction(activityStreamObject);
            }

            if(activityStreamObject.verb === "deleteExistingRelation"){
                var element = activityStreamObject.object;
                console.log("Removing relation from: " + element.sourceId + "to: " + element.taretId);
                TogetherJS.send({
                    type: 'deleteExistingRelation',
                    sourceId: element.sourceId,
                    targetId: element.targetId
                });
                console.log("Adding action to protocol.");
                this.storageHandler.logAction(activityStreamObject);
            }

            if(activityStreamObject.verb === "removeConcept"){
                var concept = activityStreamObject.object;
                console.log("Removing Concept with ID: " + concept.id);
                TogetherJS.send({
                    type: 'removeConcept',
                    id: concept.id
                });
                console.log("Adding action to protocol.");
                this.storageHandler.logAction(activityStreamObject);
            }

            if(activityStreamObject.verb === "deleteAll"){
                console.log("Deleting the whole map.")
                TogetherJS.send({
                    type: 'deleteAll'
                });
                console.log("Adding action to protocol.");
                this.storageHandler.logAction(activityStreamObject);
            }

            if(activityStreamObject.verb === "updateColor"){
                console.log("Updating color");
                var concept = activityStreamObject.object;
                TogetherJS.send({
                    type: 'updateColor',
                    id: concept.id,
                    color: concept.color
                });
            }

            if(activityStreamObject.verb === "updateRelation"){
                console.log("Updating relation");
                var relation = activityStreamObject.object;
                console.log("Sending update of relation.")
                TogetherJS.send({
                    type: 'updateRelation',
                    sourceId: relation.sourceId,
                    targetId: relation.targetId,
                    content: relation.content
                });
                console.log("Adding action to protocol.");
                this.storageHandler.logAction(activityStreamObject);
            }
        }
    };

    ActionLogger.prototype.verbs = {
      application_started: "application_started",
      access: "access",
      create: "create",
      add: "add",
      update: "update",
      "delete": "delete",
      load: "read",
      save: "save",
      clear: "clear",
      phase_changed: "phase_changed",
      addConcept: "addConcept",
      updateConcept: "updateConcept",
      updateText: "updateText",
      addRelation: "addRelation",
      deleteExistingRelation: "deleteExistingRelation",
      removeConcept: "removeConcept",
      deleteAll: "deleteAll",
      updateColor: "updateColor",
      updateRelation: "updateRelation"
    };

    ActionLogger.prototype.logLoadSaveAction = function(action, resource) {
      var object;
      object = {
        objectType: "resource",
        id: resource.id,
        content: resource.metadata.target
      };
      return this.log(action, object);
    };

    ActionLogger.prototype.logApplicationStarted = function() {
      var object;
      if (!this.loggedApplicationStarted) {
        object = {
          objectType: "application",
          content: {
            device: {
              navigator: {
                appCodeName: navigator.appCodeName,
                appName: navigator.appName,
                appVersion: navigator.appVersion,
                geoLocation: navigator.geolocation,
                language: navigator.language,
                oscpu: navigator.oscpu,
                platform: navigator.platform,
                product: navigator.product,
                userAgent: navigator.userAgent
              },
              browser: head.browser,
              screen: head.screen,
              features: {
                mobile: head.mobile,
                desktop: head.desktop,
                touch: head.touch,
                portrait: head.portrait,
                landscape: head.landscape,
                retina: head.retina,
                transitions: head.transitions,
                transforms: head.transforms,
                gradients: head.gradients,
                multiplebgs: head.multiplebgs,
                boxshadow: head.boxshadow,
                borderimage: head.borderimage,
                borderradius: head.borderradius,
                cssreflections: head.cssreflections,
                fontface: head.fontface,
                rgba: head.rgba
              }
            }
          }
        };
        this.log(this.verbs.application_started, object);
        return this.loggedApplicationStarted = true;
      }
    };

    return ActionLogger;

  })();

}).call(this);

/*
//@ sourceMappingURL=ActionLogger.map
*/
