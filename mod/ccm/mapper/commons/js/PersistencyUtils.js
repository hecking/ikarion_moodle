// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var _base, _base1;

  window.ut || (window.ut = {});

  (_base = window.ut).commons || (_base.commons = {});

  (_base1 = window.ut.commons).persistency || (_base1.persistency = {});

  window.ut.commons.persistency.FileStorage = (function() {
    function FileStorage() {
      console.log("Initializing ut.commons.persistency.FileStorage.");
    }

    FileStorage.prototype.storeAsFile = function(jsonObject, filename) {
      var blob, link;
      blob = new Blob([JSON.stringify(jsonObject)], {
        type: 'text/json'
      });
      if (navigator.appName.indexOf("Internet Explorer") !== -1) {
        return window.navigator.msSaveBlob(blob, filename);
      } else {
        link = document.createElement("a");
        link.download = filename;
        window.URL = window.webkitURL || window.URL;
        link.href = window.URL.createObjectURL(blob);
        document.body.appendChild(link);
        link.click();
        return document.body.removeChild(link);
      }
    };

    FileStorage.prototype.getFileFromDialog = function(callback) {
      var input;
      input = document.createElement("input");
      input.type = "file";
      input.addEventListener("change", function() {
        var file;
        file = this.files[0];
        if (file) {
          return callback(void 0, file);
        } else {
          return callback("ut.commons.persistency.FileStorage: no file selected.", void 0);
        }
      });
      input.style.display = "none";
      document.body.appendChild(input);
      input.click();
      return document.body.removeChild(input);
    };

    FileStorage.prototype.getJSonObjectFromDialog = function(callback) {
      return this.getFileFromDialog(function(errorMsg, file) {
        var exception, reader;
        if (errorMsg) {
          return callback(errorMsg, void 0);
        } else {
          try {
            reader = new FileReader();
            reader.onload = function(e) {
              var exception, jsonObject;
              try {
                jsonObject = JSON.parse(e.target.result);
                return callback(void 0, jsonObject);
              } catch (_error) {
                exception = _error;
                return callback("ut.commons.persistency: could not parse json.", void 0);
              }
            };
            return reader.readAsText(file);
          } catch (_error) {
            exception = _error;
            return callback("ut.commons.persistency: could not read.", void 0);
          }
        }
      });
    };

    return FileStorage;

  })();

}).call(this);

/*
//@ sourceMappingURL=PersistencyUtils.map
*/
