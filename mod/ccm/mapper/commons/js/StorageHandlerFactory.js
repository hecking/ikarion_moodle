// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var goLabLocalStorageKey,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  console.log("Warning: The StorageHandler in /client/commons/js/StorageHandlerFactory.coffee is deprecated. Use the StorageHandler in StorageHandler.coffee instead.");

  window.golab = window.golab || {};

  window.golab.ils = window.golab.ils || {};

  window.golab.ils.storage = window.golab.ils.storage || {};

  window.golab.ils.storage.memory = window.golab.ils.storage.memory || {};

  /*
    Superclass for all storage handlers
  */


  window.golab.ils.storage.StorageHandler = (function() {
    function StorageHandler(metadataHandler) {
      this.createResource = __bind(this.createResource, this);
      this.getResourceBundle = __bind(this.getResourceBundle, this);
      var error;
      console.log("Initializing StorageHandler.");
      this._debug = true;
      try {
        metadataHandler.getMetadata();
        this.metadataHandler = metadataHandler;
      } catch (_error) {
        error = _error;
        throw "StorageHandler needs a MetadataHandler at construction!";
      }
    }

    StorageHandler.prototype.getMetadataHandler = function() {
      return this.metadataHandler;
    };

    StorageHandler.prototype.getResourceDescription = function(resource) {
      return {
        id: resource.id,
        title: resource.metadata.target.displayName,
        tool: resource.metadata.generator.displayName,
        modified: new Date(resource.metadata.published)
      };
    };

    StorageHandler.prototype.getResourceBundle = function(content) {
      var resource;
      resource = {};
      resource.id = ut.commons.utils.generateUUID();
      resource.metadata = JSON.parse(JSON.stringify(this.metadataHandler.getMetadata()));
      resource.metadata.published = new Date().toISOString();
      resource.content = JSON.parse(JSON.stringify(content));
      return resource;
    };

    /*
      Reads a resource with a given id.
      Returns a json object {id, metadata{}, content{}}
      Returns undefined if resourceId cannot be found
    */


    StorageHandler.prototype.readResource = function(resourceId) {
      throw "Abstract function - implement in subclass.";
    };

    /*
      Creates a resource with the given content.
      Returns a json object {id, metadata{}, content{}}
      Returns undefined if something went wrong
    */


    StorageHandler.prototype.createResource = function(content) {
      throw "Abstract function - implement in subclass.";
    };

    /*
      Updates an existing resource with new content.
      Returns a json object {id, metadata{}, content{}}
      Returns undefined if something went wrong
    */


    StorageHandler.prototype.updateResource = function(resourceId, content) {
      throw "Abstract function - implement in subclass.";
    };

    /*
      Lists all existing resources
      Returns an array with existing resourceId's
    */


    StorageHandler.prototype.listResourceIds = function() {
      throw "Abstract function - implement in subclass.";
    };

    /*
      Lists the metadata of all existing resources
      Returns an array with existing metadatas: [ {id: 123, metadata: {...}}, ... ]
    */


    StorageHandler.prototype.listResourceMetaDatas = function() {
      throw "Abstract function - implement in subclass.";
    };

    return StorageHandler;

  })();

  /*
    Implementation of an object storage handler
  */


  window.golab.ils.storage.ObjectStorageHandler = (function(_super) {
    __extends(ObjectStorageHandler, _super);

    function ObjectStorageHandler(metadataHandler, storeObject) {
      this.createResource = __bind(this.createResource, this);
      ObjectStorageHandler.__super__.constructor.apply(this, arguments);
      if (typeof storeObject !== "object") {
        throw "you must pass on an object to store the resources";
      }
      this.storeObject = storeObject;
      console.log("Initializing ObjectStorageHandler.");
      this;
    }

    ObjectStorageHandler.prototype.readResource = function(resourceId) {
      if (this.storeObject[resourceId]) {
        if (this._debug) {
          console.log("MemoryStorage: readResource " + resourceId);
        }
        return JSON.parse(JSON.stringify(this.storeObject[resourceId]));
      } else {
        if (this._debug) {
          console.log("MemoryStorage: readResource " + resourceId + " not found.");
        }
        return void 0;
      }
    };

    ObjectStorageHandler.prototype.createResource = function(content) {
      var error, resource;
      try {
        resource = this.getResourceBundle(content);
        if (this.storeObject[resource.id]) {
          if (this._debug) {
            console.log("MemoryStorage: resource already exists! " + resource.id);
          }
          return void 0;
        } else {
          this.storeObject[resource.id] = resource;
          if (this._debug) {
            console.log("MemoryStorage: resource created: " + resource);
          }
          if (this._debug) {
            console.log(resource);
          }
          return resource;
        }
      } catch (_error) {
        error = _error;
        if (this._debug) {
          console.log("MemoryStorage: resource NOT created: " + error);
        }
        return void 0;
      }
    };

    ObjectStorageHandler.prototype.updateResource = function(resourceId, content) {
      var resource;
      if (this.storeObject[resourceId]) {
        resource = this.getResourceBundle(content);
        this.storeObject[resourceId] = resource;
        console.log("MemoryStorage: updateResource " + resourceId);
        return resource;
      } else {
        console.log("MemoryStorage: updateResource failed, resource doesn't exist: " + resourceId);
        return void 0;
      }
    };

    ObjectStorageHandler.prototype.listResourceIds = function() {
      var id, resource, _ref, _results;
      _ref = this.storeObject;
      _results = [];
      for (id in _ref) {
        resource = _ref[id];
        _results.push(id);
      }
      return _results;
    };

    ObjectStorageHandler.prototype._listResourceMetaDatas = function() {
      var id, metadatas, resource, _ref;
      metadatas = {};
      _ref = this.storeObject;
      for (id in _ref) {
        resource = _ref[id];
        metadatas[id] = JSON.parse(JSON.stringify(resource.metadata));
      }
      return metadatas;
    };

    ObjectStorageHandler.prototype.listResourceMetaDatas = function() {
      var id, metadatas, resource, _ref;
      metadatas = [];
      _ref = this.storeObject;
      for (id in _ref) {
        resource = _ref[id];
        metadatas.push({
          id: id,
          metadata: JSON.parse(JSON.stringify(resource.metadata))
        });
      }
      return metadatas;
    };

    return ObjectStorageHandler;

  })(window.golab.ils.storage.StorageHandler);

  /*
    Implementation of a memory storage handler, which is a subclass of the object storage handler.
  */


  window.golab.ils.storage.MemoryStorageHandler = (function(_super) {
    __extends(MemoryStorageHandler, _super);

    function MemoryStorageHandler(metadataHandler) {
      MemoryStorageHandler.__super__.constructor.call(this, metadataHandler, {});
      console.log("Initializing MemoryStorageHandler, debug: " + this._debug + ".");
      this;
    }

    return MemoryStorageHandler;

  })(window.golab.ils.storage.ObjectStorageHandler);

  /*
    Implementation of a local (browser) storage handler.
  */


  goLabLocalStorageKey = "_goLab_";

  window.golab.ils.storage.LocalStorageHandler = (function(_super) {
    __extends(LocalStorageHandler, _super);

    function LocalStorageHandler(metadataHandler) {
      this.createResource = __bind(this.createResource, this);
      LocalStorageHandler.__super__.constructor.apply(this, arguments);
      console.log("Initializing LocalStorageHandler.");
      this;
    }

    LocalStorageHandler.prototype.readResource = function(resourceId) {
      if (localStorage[goLabLocalStorageKey + resourceId]) {
        if (this._debug) {
          console.log("LocalStorageHandler: readResource " + resourceId);
        }
        return JSON.parse(localStorage[goLabLocalStorageKey + resourceId]);
      } else {
        if (this._debug) {
          console.log("LocalStorageHandler: readResource " + resourceId + " not found.");
        }
        return void 0;
      }
    };

    LocalStorageHandler.prototype.createResource = function(content) {
      var error, resource, resourceId;
      try {
        resource = this.getResourceBundle(content);
        resourceId = resource.id;
        if (localStorage[goLabLocalStorageKey + resourceId]) {
          if (this._debug) {
            console.log("LocalStorageHandler: resource already exists! " + resource.id);
          }
          return void 0;
        } else {
          localStorage[goLabLocalStorageKey + resourceId] = JSON.stringify(resource);
          if (this._debug) {
            console.log("LocalStorageHandler: resource created: " + resource);
          }
          if (this._debug) {
            console.log(resource);
          }
          return resource;
        }
      } catch (_error) {
        error = _error;
        if (this._debug) {
          console.log("LocalStorageHandler: resource NOT created: " + error);
        }
        return void 0;
      }
    };

    LocalStorageHandler.prototype.updateResource = function(resourceId, content) {
      var resource;
      if (localStorage[goLabLocalStorageKey + resourceId]) {
        resource = this.getResourceBundle(content);
        localStorage[goLabLocalStorageKey + resourceId] = JSON.stringify(resource);
        console.log("LocalStorageHandler: updateResource " + resourceId);
        return resource;
      } else {
        console.log("LocalStorageHandler: updateResource failed, resource doesn't exist: " + resourceId);
        return void 0;
      }
    };

    LocalStorageHandler.prototype.isGoLabKey = function(key) {
      return key.indexOf(goLabLocalStorageKey) === 0;
    };

    LocalStorageHandler.prototype.listResourceIds = function() {
      var id, resourceString, _results;
      _results = [];
      for (id in localStorage) {
        resourceString = localStorage[id];
        if (this.isGoLabKey(id)) {
          _results.push(id);
        }
      }
      return _results;
    };

    LocalStorageHandler.prototype._listResourceMetaDatas = function() {
      var id, metadatas, resource, resourceString;
      metadatas = {};
      for (id in localStorage) {
        resourceString = localStorage[id];
        if (!(this.isGoLabKey(id))) {
          continue;
        }
        resource = JSON.parse(resourceString);
        metadatas[resource.id] = {
          id: resource.id,
          metadata: resource.metadata
        };
      }
      return metadatas;
    };

    LocalStorageHandler.prototype.listResourceMetaDatas = function() {
      var id, metadatas, resource, resourceString;
      metadatas = [];
      for (id in localStorage) {
        resourceString = localStorage[id];
        if (!(this.isGoLabKey(id))) {
          continue;
        }
        resource = JSON.parse(resourceString);
        metadatas.push({
          id: resource.id,
          metadata: resource.metadata
        });
      }
      return metadatas;
    };

    return LocalStorageHandler;

  })(window.golab.ils.storage.StorageHandler);

}).call(this);

/*
//@ sourceMappingURL=StorageHandlerFactory.map
*/
