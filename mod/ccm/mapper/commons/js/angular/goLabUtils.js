// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var angular, askQuestionDirective, dialogBoxDirective, dummy, durationFilter, g4i18nDirective, g4i18nFilter, getCssPixelValue, golabContainerDirective, i_g4i18nFilter;

  window.ut = window.ut || {};

  ut.commons = ut.commons || {};

  angular = window.angular;

  ut.commons.golabUtils = angular.module('golabUtils', []);

  ut.commons.golabUtils.factory("browser", function() {
    var browser, isSafari, testCSS;
    testCSS = function(prop) {
      return prop in document.documentElement.style;
    };
    isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
    browser = {
      isOpera: !!(window.opera && window.opera.version),
      isFirefox: testCSS('MozBoxSizing'),
      isSafari: isSafari,
      isChrome: !isSafari && testCSS('WebkitTransform'),
      isIE: false || testCSS('msTransform'),
      isWebKit: testCSS('WebkitTransform')
    };
    return browser;
  });

  getCssPixelValue = function(element, cssName) {
    var value;
    value = element.css(cssName);
    return parseInt(value);
  };

  ut.commons.golabUtils.factory("errorHandler", [
    function() {
      var start;
      start = function(actionLogger) {
        window.onerror = function(message, url, line) {
          var object, showAlert, suppressErrorAlert;
          showAlert = false;
          showAlert = head.mobile;
          if (showAlert) {
            alert("Error: " + message + "\nurl: " + url + "\nline #: " + line);
          }
          if (actionLogger) {
            object = {
              objectType: "error",
              id: window.location.href,
              content: {
                message: message,
                url: url,
                line: line
              }
            };
            actionLogger.log(actionLogger.verbs.error, object);
          }
          suppressErrorAlert = false;
          return suppressErrorAlert;
        };
        return console.log("Installed error handler");
      };
      return {
        start: start
      };
    }
  ]);

  golabContainerDirective = function($timeout, languageHandler) {
    return {
      restrict: "E",
      scope: {
        containertitle: "@"
      },
      template: "<div class=\"golabContainer\">\n  <div class=\"golabContainerHeader\">\n    <img ng-src=\"{{minimizeImage}}\" class=\"golabContainerMinimizeButton activeButton\"\n      ng-click=\"toggleMinimize()\" ng-show=\"showMinimize\"/>\n    <span class=\"golabContainerTitle\">{{containertitle | i_g4i18n}}</span>\n  </div>\n  <div class=\"golabContainerContent\">\n    <div ng-transclude></div>\n  </div>\n</div>",
      replace: true,
      transclude: true,
      link: function(scope, element, attrs) {
        var adjustHeight, containerHeight, contentHeight, golabContainer, golabContainerContent, golabContainerHeader, golabContainerTitle, headerHeight, minimizeClassExtension, minimizeDirection, minimizeImage, minimizeVertical, minimized, oldHeight, sizeComponent, sizeComponentSelector, unminimizeImage;
        sizeComponentSelector = ut.commons.utils.getAttributeValue(attrs, "sizeComponent", "");
        if (sizeComponentSelector) {
          sizeComponent = element.find(sizeComponentSelector);
          if (sizeComponent && sizeComponent.length) {
            if (sizeComponent.prop("tagName") === "TEXTAREA") {
              sizeComponent.css("resize", "none");
            }
            scope.element = element;
            oldHeight = element.height();
            adjustHeight = function(newHeight) {
              sizeComponent.height(sizeComponent.height() + newHeight - oldHeight);
              return oldHeight = newHeight;
            };
            $timeout(function() {
              var currentHeight;
              currentHeight = element.height();
              if (oldHeight !== currentHeight) {
                return adjustHeight(currentHeight);
              }
            }, 200);
          }
        }
        scope.showMinimize = false;
        scope.minimizeImage = "";
        minimizeDirection = ut.commons.utils.getAttributeValue(attrs, "minimize", "").toLowerCase();
        minimizeClassExtension = "";
        minimizeVertical = false;
        switch (minimizeDirection) {
          case "":
            minimizeClassExtension = "";
            break;
          case "vertical":
            minimizeClassExtension = "Vertical";
            minimizeVertical = true;
            break;
          case "horizontal":
            minimizeClassExtension = "Horizontal";
            break;
          default:
            console.log("unknown minimize value: " + minimizeDirection);
        }
        if (minimizeClassExtension) {
          scope.showMinimize = true;
          golabContainer = element;
          golabContainerHeader = golabContainer.find(".golabContainerHeader");
          golabContainerContent = golabContainer.find(".golabContainerContent");
          golabContainerTitle = golabContainer.find(".golabContainerTitle");
          minimized = false;
          minimizeImage = "" + ut.commons.utils.commonsImagesPath + "minimize.png";
          unminimizeImage = "" + ut.commons.utils.commonsImagesPath + "unminimize.png";
          scope.minimizeImage = minimizeImage;
          headerHeight = golabContainerHeader.height();
          contentHeight = golabContainerContent.height();
          containerHeight = golabContainer.height();
          return scope.toggleMinimize = function() {
            var newContainerHeight;
            if (minimized) {
              element.removeClass("golabContainerMinimized" + minimizeClassExtension);
              golabContainerContent.removeClass("golabContainerContentMinimized");
              if (minimizeVertical) {
                golabContainerTitle.removeClass("golabContainerTitleVertical");
                golabContainer.height(containerHeight);
              }
              scope.minimizeImage = minimizeImage;
            } else {
              containerHeight = golabContainer.height();
              element.addClass("golabContainerMinimized" + minimizeClassExtension);
              golabContainerContent.addClass("golabContainerContentMinimized");
              if (minimizeVertical) {
                contentHeight = golabContainerContent.height();
                golabContainerTitle.addClass("golabContainerTitleVertical");
                newContainerHeight = headerHeight + golabContainerTitle.width() - 1 + getCssPixelValue(golabContainerTitle, "padding-left") + getCssPixelValue(golabContainerTitle, "padding-right");
                golabContainer.height(newContainerHeight);
              }
              scope.minimizeImage = unminimizeImage;
            }
            return minimized = !minimized;
          };
        }
      }
    };
  };

  ut.commons.golabUtils.directive("golabcontainer", ["$timeout", "languageHandler", golabContainerDirective]);

  dummy = {
    dialogBoxes: [],
    $root: null
  };

  dialogBoxDirective = function($timeout, languageHandler) {
    return {
      restrict: "E",
      template: "<div ng-transclude class=\"dialogBoxContent\"></div>",
      replace: true,
      transclude: true,
      link: function(scope, element, attrs) {
        var addSpecifiedAttributeValue, dialogBoxObject, dialogOptions, id, incrementDialogBoxChangeCounter;
        if (!scope.dialogBoxes) {
          throw new Error("there must be a dialogBoxes property on the scope in order to use the dialogBox tag");
        }
        if (!attrs["id"]) {
          throw new Error("id atrribute must be specified for dialogBox tag");
        }
        id = attrs["id"];
        if (scope.dialogBoxes[id]) {
          throw new Error("duplicate id attribute (" + id + ") of dialogBox tag");
        }
        dialogBoxObject = {};
        scope.dialogBoxes[id] = dialogBoxObject;
        dialogOptions = {
          beforeClose: function(event, ui) {
            if (typeof scope["beforeCloseDialogBox"] === "function") {
              scope.beforeCloseDialogBox(id);
            }
            return $timeout(function() {
              return element.dialog("close");
            }, 0);
          }
        };
        addSpecifiedAttributeValue = function(name, defaultValue) {
          var lcName;
          lcName = name.toLowerCase();
          if (attrs[lcName]) {
            return dialogOptions[name] = attrs[lcName];
          } else if (defaultValue) {
            return dialogOptions[name] = defaultValue;
          }
        };
        addSpecifiedAttributeValue("modal", true);
        addSpecifiedAttributeValue("title");
        addSpecifiedAttributeValue("resizable");
        addSpecifiedAttributeValue("width");
        addSpecifiedAttributeValue("height");
        if (dialogOptions.title) {
          dialogOptions.title = languageHandler.getI_Message(dialogOptions.title);
        }
        element.hide();
        if (typeof scope.$root.dialogBoxChangeCounter === "undefined") {
          scope.$root.dialogBoxChangeCounter = 0;
        }
        incrementDialogBoxChangeCounter = function() {
          return scope.$root.dialogBoxChangeCounter++;
        };
        dialogBoxObject.show = function() {
          element.dialog(dialogOptions);
          return incrementDialogBoxChangeCounter();
        };
        return dialogBoxObject.close = function() {
          console.log("dialogBox directive: close dialog " + id);
          element.dialog("close");
          return incrementDialogBoxChangeCounter();
        };
      }
    };
  };

  ut.commons.golabUtils.directive("dialogbox", ["$timeout", "languageHandler", dialogBoxDirective]);

  dummy = {
    questionParams: {},
    dialogBoxId: "",
    answer: "",
    okLabel: "",
    questionOkAnswer: null,
    questionCancelAnswer: null
  };

  askQuestionDirective = function($timeout, languageHandler, $rootScope) {
    $rootScope.askQuestion = {};
    return {
      restrict: "E",
      template: "<div>\n  <div ng-show='questionParams.question'>{{questionParams.question}}</div>\n  <input ng-model=\"askQuestion.questionParams.answer\" ng-show=\"showInput\"/>\n  <div class=\"dialogButtonRow\">\n    <button class=\"dialogButton\" ng-click=\"ok()\">{{okLabel}}</button>\n    <button class=\"dialogButton\" ng-click=\"cancel()\">{{cancelLabel}}</button>\n  </div>\n</div>",
      replace: true,
      transclude: false,
      link: function(scope, element, attrs) {
        var addSpecifiedAttributeValue, askQuestionOptions, closeDialogBox, updateState;
        askQuestionOptions = {};
        addSpecifiedAttributeValue = function(name, defaultValue) {
          var lcName;
          lcName = name.toLowerCase();
          if (attrs[lcName]) {
            return askQuestionOptions[name] = attrs[lcName];
          } else if (defaultValue) {
            return askQuestionOptions[name] = defaultValue;
          }
        };
        addSpecifiedAttributeValue("ok");
        addSpecifiedAttributeValue("cancel");
        if (askQuestionOptions.ok) {
          askQuestionOptions.ok = languageHandler.getI_Message(askQuestionOptions.ok);
        }
        if (askQuestionOptions.cancel) {
          askQuestionOptions.cancel = languageHandler.getI_Message(askQuestionOptions.cancel);
        }
        scope.okLabel = askQuestionOptions.ok;
        scope.cancelLabel = askQuestionOptions.cancel;
        scope.showInput = true;
        updateState = function() {
          if (scope.askQuestion.questionParams) {
            if (typeof scope.askQuestion.questionParams.answer !== "string") {
              scope.showInput = false;
            }
            if (scope.askQuestion.questionParams.okLabel) {
              scope.okLabel = scope.askQuestion.questionParams.okLabel;
            }
            if (scope.askQuestion.questionParams.cancelLabel) {
              return scope.cancelLabel = scope.askQuestion.questionParams.cancelLabel;
            }
          }
        };
        scope.elem = element;
        scope.$watch("dialogBoxChangeCounter", function() {
          if (element.is(':visible')) {
            return updateState();
          }
        });
        closeDialogBox = function() {
          if (scope.askQuestion.questionParams.dialogBoxId) {
            return scope.dialogBoxes[scope.askQuestion.questionParams.dialogBoxId].close();
          }
        };
        scope.ok = function() {
          if (scope.askQuestion.questionParams.questionOkAnswer) {
            scope.askQuestion.questionParams.questionOkAnswer(scope.askQuestion.questionParams.answer);
          }
          return closeDialogBox();
        };
        return scope.cancel = function() {
          if (scope.askQuestion.questionParams.questionCancelAnswer) {
            scope.askQuestion.questionParams.questionCancelAnswer();
          }
          return closeDialogBox();
        };
      }
    };
  };

  ut.commons.golabUtils.directive("askquestion", ["$timeout", "languageHandler", "$rootScope", askQuestionDirective]);

  g4i18nFilter = function(languageHandler) {
    return function(key) {
      return languageHandler.getMessage.apply(languageHandler, arguments);
    };
  };

  ut.commons.golabUtils.filter("g4i18n", ["languageHandler", g4i18nFilter]);

  i_g4i18nFilter = function(languageHandler) {
    return function(key) {
      return languageHandler.getI_Message.apply(languageHandler, arguments);
    };
  };

  ut.commons.golabUtils.filter("i_g4i18n", ["languageHandler", i_g4i18nFilter]);

  g4i18nDirective = function(languageHandler) {
    return {
      restrict: "A",
      link: function(scope, element, attrs) {
        var key;
        key = attrs["g4i18n"];
        return element.text(languageHandler.getMessage(key));
      }
    };
  };

  ut.commons.golabUtils.directive("g4i18n", ["languageHandler", g4i18nDirective]);

  durationFilter = function() {
    return function(millis) {
      var hours, minutes, numTo2DigitsString, seconds, secondsLeft;
      numTo2DigitsString = function(num) {
        if (num < 10) {
          return "0" + num;
        } else {
          return "" + num;
        }
      };
      seconds = Math.floor(millis / 1000);
      hours = Math.floor(seconds / (60 * 60));
      secondsLeft = seconds - 60 * 60 * hours;
      minutes = Math.floor(secondsLeft / 60);
      secondsLeft -= minutes * 60;
      if (hours === 0) {
        return "" + minutes + ":" + (numTo2DigitsString(secondsLeft));
      } else {
        return "" + hours + ":" + (numTo2DigitsString(minutes)) + ":" + (numTo2DigitsString(secondsLeft));
      }
    };
  };

  ut.commons.golabUtils.filter("duration", [durationFilter]);

}).call(this);

/*
//@ sourceMappingURL=golabUtils.map
*/
