// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var createEnvironmentHandlers, document, runningInGraasp;

  this.golab = this.golab || {};

  this.golab.common = this.golab.common || {};

  if (false) {
    document = document || {};
    document.URL = document.URL || {};
    window.location = window.location || {};
  }

  runningInGraasp = window.gadgets != null;

  createEnvironmentHandlers = function(documentType, toolName, desiredLanguage, callBack) {
    var checkForReady, findDesiredLoggingTarget, findDesiredNotificationServer, findDesiredStorageServer, getParameterFromUrl, languageHandlerCallBack, metadata, metadataHandlerCallback, receivedLanguageHandler, receivedMetadataHandler;
    receivedMetadataHandler = null;
    receivedLanguageHandler = null;
    getParameterFromUrl = function(key) {
      var lcKey, parameter, part, partParts, parts, queryPart, _i, _len;
      lcKey = key.toLowerCase();
      parameter = null;
      queryPart = location.search.trim().toLowerCase();
      if (queryPart && queryPart[0] === "?") {
        parts = queryPart.substring(1).split("&");
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          partParts = part.split("=");
          if (partParts.length === 2 && partParts[0] === lcKey) {
            parameter = partParts[1];
          }
        }
      }
      return parameter;
    };
    findDesiredLoggingTarget = function() {
      var loggingTargetFromUrl;
      if (runningInGraasp) {
        return "opensocial";
      } else {
        loggingTargetFromUrl = getParameterFromUrl("loggingTarget");
        if (loggingTargetFromUrl) {
          return loggingTargetFromUrl;
        } else {
          return "null";
        }
      }
    };
    findDesiredNotificationServer = function() {
      var notificationServerFromUrl;
      notificationServerFromUrl = getParameterFromUrl("notificationServer");
      if (notificationServerFromUrl) {
        return notificationServerFromUrl;
      } else {
        return null;
      }
    };
    findDesiredStorageServer = function() {
      var storage;
      storage = getParameterFromUrl("storageServer");
      if (storage) {
        return storage;
      } else {
        return null;
      }
    };
    checkForReady = function() {
      var actionLogger, desiredStorageUrl, notificationClient, storageHandler, storageUrl;
      if (receivedMetadataHandler && receivedLanguageHandler) {
        storageUrl = "local";
        desiredStorageUrl = findDesiredStorageServer();
        if (desiredStorageUrl) {
          switch (desiredStorageUrl.toLocaleLowerCase()) {
            case "tomtest":
              storageUrl = "http://tomtest.gw.utwente.nl:8080";
              break;
            case "moodle":
              storageUrl = "../../../../..";
              receivedMetadataHandler.setInstanceId(getParameterFromUrl("instance"));
              receivedMetadataHandler.setGroupId(getParameterFromUrl("groupId"));
              receivedMetadataHandler.setEditable(getParameterFromUrl("canEdit"));
              receivedMetadataHandler.setCloseTime(getParameterFromUrl("timeclose"));
              receivedMetadataHandler.setUserId(getParameterFromUrl("userId"));
              receivedMetadataHandler.setRole(getParameterFromUrl("role"));
              receivedMetadataHandler.setName(getParameterFromUrl("name"));
              break;
            case "local":
              break;
            default:
              storageUrl = desiredStorageUrl;
          }
        }
        if (storageUrl === "local") {
          storageHandler = new window.golab.ils.storage.LocalStorageHandler(receivedMetadataHandler);
        } else {
          storageHandler = new window.golab.ils.storage.MoodleStorageHandler(receivedMetadataHandler, storageUrl);
        }
        actionLogger = new window.ut.commons.actionlogging.ActionLogger(receivedMetadataHandler);
        notificationClient = new window.ude.commons.NotificationClient(receivedMetadataHandler, findDesiredNotificationServer());
        actionLogger.setLoggingTarget(findDesiredLoggingTarget());
        return callBack(receivedMetadataHandler, storageHandler, actionLogger, receivedLanguageHandler, notificationClient);
      }
    };
    metadataHandlerCallback = function(error, metadataHandler) {
      if (error) {
        return console.error("failed to create metadataHandler: " + error);
      } else {
        receivedMetadataHandler = metadataHandler;
        return checkForReady();
      }
    };
    languageHandlerCallBack = function(error, languageHandler) {
      if (error) {
        console.error("failed to create languageHandler: " + error);
        receivedLanguageHandler = "none";
        return checkForReady();
      } else {
        receivedLanguageHandler = languageHandler;
        return checkForReady();
      }
    };
    metadata = {
      "actor": {
        "objectType": "person",
        "name": "unknown",
        "id": "unknown",
        "groupId": "unknown",
        "canEdit": "true",
        "role": "student"
      },
      "target": {
        "objectType": documentType,
        "id": ut.commons.utils.generateUUID(),
        "dbId": "unknown",
        "displayName": "unnamed " + documentType
      },
      "generator": {
        "objectType": "application",
        "url": window.location.href,
        "id": ut.commons.utils.generateUUID(),
        "displayName": toolName
      },
      "provider": {
        "objectType": "moodle",
        "url": window.location.href,
        "id": "unknown",
        "session": "unknown",
        "timeclose": "unknown"
      }
    };
    runningInGraasp = window.gadgets != null;
    if (runningInGraasp) {
      new window.golab.ils.metadata.GoLabMetadataHandler(metadata, metadataHandlerCallback);
    } else {

      new window.golab.ils.metadata.MoodleMetadataHandler(metadata, metadataHandlerCallback);
      //new window.golab.ils.metadata.LocalMetadataHandler(metadata, metadataHandlerCallback);
    }
    return window.golab.createLanguageHandler(desiredLanguage, languageHandlerCallBack);
  };

  this.golab.common.createEnvironmentHandlers = createEnvironmentHandlers;

}).call(this);

/*
//@ sourceMappingURL=createEnvironmentHandlers.map
*/
