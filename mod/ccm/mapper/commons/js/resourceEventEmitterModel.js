// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.ut = window.ut || {};

  ut.commons = ut.commons || {};

  window.ut.commons.ResourceEventEmitterModel = (function(_super) {
    __extends(ResourceEventEmitterModel, _super);

    function ResourceEventEmitterModel(storageHandler) {
      this.storageHandler = storageHandler;
      this._id = null;
      this._metadata = null;
      this._content = null;
      this._resource = null;
      this._emitEvents = true;
      this._debug = false;
    }

    ResourceEventEmitterModel.prototype.getId = function() {
      return this._id;
    };

    ResourceEventEmitterModel.prototype.getMetadata = function() {
      return this._metadata;
    };

    ResourceEventEmitterModel.prototype.getResource = function() {
      return {
        id: this.getId(),
        metadata: this.getMetadata(),
        content: this.getResourceContent()
      };
    };

    ResourceEventEmitterModel.prototype.loadFromResource = function(resource) {
      this._emitEvents = false;
      this._id = resource.id;
      this._metadata = resource.metadata;
      this.loadFromResourceContent(resource.content);
      this._resource = resource;
      this.storageHandler.getMetadataHandler().setTarget(resource.metadata.target);
      this._emitEvents = true;
      return this.emitModelLoaded();
    };

    ResourceEventEmitterModel.prototype.clear = function() {
      this._id = null;
      this._metadata = null;
      this.clearContent();
      this.emitEvent("modelCleared");
      return this.emitModelChanged();
    };

    ResourceEventEmitterModel.prototype.hasResource = function() {
      return this.getId() !== null;
    };

    ResourceEventEmitterModel.prototype.getResourceContent = function() {
      return this._content;
    };

    ResourceEventEmitterModel.prototype.loadFromResourceContent = function(content) {
      return this._content = content;
    };

    ResourceEventEmitterModel.prototype.clearContent = function() {
      this._content = null;
      this.emitEvent("contentCleared");
      return this.emitModelChanged();
    };

    ResourceEventEmitterModel.prototype.emitEvents = function() {
      return this._emitEvents;
    };

    ResourceEventEmitterModel.prototype.emitEvent = function(event, args) {
      if (this.emitEvents()) {
        if (this._debug) {
          console.log("emitEvent(" + (JSONR.stringify(arguments)) + ")");
        }
        return ResourceEventEmitterModel.__super__.emitEvent.call(this, event, args);
      }
    };

    ResourceEventEmitterModel.prototype.emitModelChanged = function() {
      return this.emitEvent("modelChanged");
    };

    ResourceEventEmitterModel.prototype.emitModelLoaded = function() {
      this.emitEvent("modelLoaded");
      return this.emitModelChanged();
    };

    ResourceEventEmitterModel.prototype.addListeners = function(events, listener) {
      var event, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        _results.push(this.addListener(event, listener));
      }
      return _results;
    };

    ResourceEventEmitterModel.prototype.createResource = function(callback) {
      var content,
        _this = this;
      content = this.getResourceContent();
      return this.storageHandler.createResource(content, function(error, resource) {
        if (!error) {
          _this._resource = resource;
          _this._id = resource.id;
          _this._metadata = resource.metadata;
        }
        if (callback) {
          return callback(error, resource);
        }
      });
    };

    ResourceEventEmitterModel.prototype.getResourceBundle = function() {
      var content, id, resourceBundle;
      id = this.getId();
      content = this.getResourceContent();
      resourceBundle = id ? this.storageHandler.getResourceBundle(content, id) : this.storageHandler.getResourceBundle(content);
      this._resource = resourceBundle;
      this._id = resourceBundle.id;
      this._metadata = resourceBundle.metadata;
      return resourceBundle;
    };

    ResourceEventEmitterModel.prototype.getDisplayName = function(displayName) {
      if (this._metadata) {
        return this._metadata.target.displayName;
      } else {
        return this.storageHandler.getMetadataHandler().getTargetDisplayName();
      }
    };

    ResourceEventEmitterModel.prototype.setDisplayName = function(displayName) {
      return this.storageHandler.getMetadataHandler().setTargetDisplayName(displayName);
    };

    ResourceEventEmitterModel.prototype.getResourceDescription = function() {
      if (this._resource) {
        return this.storageHandler.getResourceDescription(this._resource);
      } else {
        return {
          id: this.getId(),
          title: this.storageHandler.getMetadataHandler().getTarget().displayName,
          tool: this.storageHandler.getMetadataHandler().getGenerator().displayName,
          modified: new Date(0)
        };
      }
    };

    return ResourceEventEmitterModel;

  })(window.EventEmitter);

}).call(this);

/*
//@ sourceMappingURL=resourceEventEmitterModel.map
*/
